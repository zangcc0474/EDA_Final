gothdata <- filter(cathedral, Type == 'Gothic')
gothdataq <- lm(Length ~ Height + Height^2)
gothdata <- filter(cathedral, Type == 'Gothic')
gothdataq <- lm(Length ~ Height + Height^2, data = gothdata )
plot(Length ~ Height, data = gothdata)
mromaq <- lm(Length ~ Height + Height^2, data = romadata )
summary(mromaq)
gothdataq <- lm(Length ~ Height + Height^2, data = gothdata )
summary(gothdataq)
mromaq <- lm(Length ~ Height + Height^2, data = romadata )
plot(mromaq)
summary(mromaq)
mromaq <- lm(Length ~ Height + Height^2, data = romadata )
plot(Length ~ Height + Height^2, data = romadata)
summary(mromaq)
data("cathedral")
romadata <- filter(cathedral, Type == 'Romanesque')
plot(Length ~ Height, data = romadata)
mroma <- lm(Length ~ Height, data = romadata)
summary(mroma)
abline(mroma)
abline()
data("cathedral")
romadata <- filter(cathedral, Type == 'Romanesque')
plot(Length ~ Height, data = romadata)
abline(mroma)
data("cathedral")
romadata <- filter(cathedral, Type == 'Romanesque')
plot(Length ~ Height, data = romadata)
abline(mroma)
mromaq <- lm(Length ~ Height + Height^2, data = romadata )
summary(mromaq)
data("cathedral")
romadata <- filter(cathedral, Type == 'Romanesque')
plot(Length ~ Height, data = romadata)
abline(mroma)
abline(mromaq)
data("cathedral")
romadata <- filter(cathedral, Type == 'Romanesque')
plot(Length ~ Height, data = romadata)
abline(mroma)
abline(mromaq)
data("cathedral")
romadata <- filter(cathedral, Type == 'Romanesque')
plot(Length ~ Height, data = romadata)
abline(mromaq)
mromaq <- lm(Length ~ Height + Height^2, data = romadata )
summary(mromaq)
mroma <- lm(Length ~ Height, data = romadata)
summary(mroma)
mromaq <- lm(Length ~ Height + I(Height^2), data = romadata )
summary(mromaq)
gothdata <- filter(cathedral, Type == 'Gothic')
gothdataq <- lm(Length ~ Height + I(Height^2), data = gothdata )
plot(Length ~ Height, data = gothdata)
# Build the quadratic model
gothdataq <- lm(Length ~ Height + I(Height^2), data = gothdata )
summary(gothdataq)
# Get the data with Gothic style and plot the scatter plot
gothdata <- filter(cathedral, Type == 'Gothic')
plot(Length ~ Height, data = gothdata)
abline(gothdataq)
# Build the quadratic model
gothdataq <- lm(Length ~ Height + I(Height^2), data = gothdata )
summary(gothdataq)
# Build the quadratic model
gothdataq <- lm(Length ~ Height + I(Height^2), data = gothdata )
summary(gothdataq)
print(plot(Effect("Height", m2)))
# Build the quadratic model
gothdataq <- lm(Length ~ Height + I(Height^2), data = gothdata )
summary(gothdataq)
print(plot(Effect("Height", gothdataq)))
summary(m2 <- lm(Length ~ poly(Height, 2, raw=TRUE)))
summary(m2 <- lm(Length ~ poly(Height, 2, raw=TRUE), data = gothdataq))
summary(m2 <- lm(Length ~ poly(Height, 2, raw=TRUE,  data = gothdataq)))
Length <- gothdata$Length
Height <- gothdata$Height
summary(m2 <- lm(Length ~ poly(Height, 2, raw=TRUE)))
Length <- gothdata$Length
Height <- gothdata$Height
summary(m2 <- lm(Length ~ poly(Height, 2, raw=TRUE)))
print(plot(Effect("Height", m2)))
# Build the quadratic model
mromaq <- lm(Length ~ Height + I(Height^2), data = romadata )
summary(mromaq)
print(plot(Effect("Height", mromaq)))
# Get the data with Romanesque style and plot the scatter plot
data("cathedral")
romadata <- filter(cathedral, Type == 'Romanesque')
plot(Length ~ Height, data = romadata)
# Get the data with Romanesque style and plot the scatter plot
data("cathedral")
romadata <- filter(cathedral, Type == 'Romanesque')
mroma <- lm(Length ~ Height, data = romadata)
summary(mroma)
# Build simple linear regression model
plot(Length ~ Height, data = romadata)
abline(mroma)
# Build the quadratic model
mromaq <- lm(Length ~ Height + I(Height^2), data = romadata )
summary(mromaq)
print(plot(Effect("Height", mromaq)))
# Get the data with Gothic style and plot the scatter plot
gothdata <- filter(cathedral, Type == 'Gothic')
mgoth <- lm(Length ~ Height, data = gothdata)
summary(mgoth)
# Build simple linear regression model
plot(Length ~ Height, data = gothdata)
abline(mgoth)
# Build the quadratic model
gothdataq <- lm(Length ~ Height + I(Height^2), data = gothdata )
summary(gothdataq)
print(plot(Effect("Height", gothdataq)))
print(plot(Effect("Height", m2)))
Length <- gothdata$Length
Height <- gothdata$Height
summary(m2 <- lm(Length ~ poly(Height, 2, raw=TRUE)))
print(plot(Effect("Height", m2)))
print(plot(Effect("Height", gothdataq)))
data(salary)
par(mfrow=c(1, 3))
boxplot(salary~sex, salary)
data('salary')
par(mfrow=c(1, 3))
boxplot(salary~sex, salary)
library("alr4", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
data('salary')
par(mfrow=c(1, 3))
boxplot(salary~sex, salary)
data('salary')
par(mfrow=c(1, 3))
boxplot(salary~sex, salary)
boxplot(salary~rank, salary)
boxplot(salary~degree, salary)
xyplot(salary~year|sex, data=salary, type=c("p", "g", "r"))
?xyplot
xyplot(salary~year|sex, data=salary, type=c("p", "g", "r"))
??xyplot
detach("package:stats", unload=TRUE)
library("stats", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
xyplot(salary~year|sex, data=salary, type=c("p", "g", "r"))
xyplot(salary~year|sex, data=salary, type=c("p", "g", "r"))
Depth <- equal.count(quakes$depth, number=8, overlap=.1)
xyplot(lat ~ long | Depth, data = quakes)
library("lattice", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
xyplot(salary~year|sex, data=salary, type=c("p", "g", "r"))
xyplot(salary~year|sex, data=salary, type=c("p", "g", "r"))
xyplot(salary~year|sex, data=salary, type=c("p", "g", "r"))
xyplot(salary~ysdeg|sex, data=salary, type=c("p", "g", "r"))
summary(m0 <- lm(salary ~ sex, salary))$coef
m2 <- lm(salary ~ ., data=salary)
summary(m2)
confint(m2)["sexFemale", , drop=FALSE]
summary(update(m2, ~ . - rank))$coef
m4 <- lm(fertility ~ log(ppgdp)  + pctUrban, data = UN11)
avPlots(m4, id.n=0)
# Step 1: Regress y on x1
my.1 <- lm(fertility ~ pctUrban, data=UN11)
# Step 2: Regress x2 on x1
m2.1 <- lm(log(ppgdp) ~ pctUrban, data=UN11)
# Step 3: Plot the residuals
summary(lm(resid(my.1) ~ resid(m2.1)))
summary(m4)
# Get the data with Romanesque style and plot the scatter plot
data("cathedral")
romadata <- filter(cathedral, Type == 'Romanesque')
detach("package:alr4", unload=TRUE)
library("alr4", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
# Get the data with Romanesque style and plot the scatter plot
data("cathedral")
romadata <- filter(cathedral, Type == 'Romanesque')
View(cathedral)
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
# Get the data with Romanesque style and plot the scatter plot
data("cathedral")
romadata <- filter(cathedral, Type == 'Romanesque')
mroma <- lm(Length ~ Height, data = romadata)
summary(mroma)
# Build simple linear regression model
plot(Length ~ Height, data = romadata)
abline(mroma)
# Build the quadratic model
mromaq <- lm(Length ~ Height + I(Height^2), data = romadata )
summary(mromaq)
print(plot(Effect("Height", mromaq)))
# Get the data with Gothic style and plot the scatter plot
gothdata <- filter(cathedral, Type == 'Gothic')
mgoth <- lm(Length ~ Height, data = gothdata)
summary(mgoth)
# Build simple linear regression model
plot(Length ~ Height, data = gothdata)
abline(mgoth)
# Build the quadratic model
gothdataq <- lm(Length ~ Height + I(Height^2), data = gothdata )
summary(gothdataq)
# Get the data with Gothic style and plot the scatter plot
gothdata <- filter(cathedral, Type == 'Gothic')
mgoth <- lm(Length ~ Height, data = gothdata)
summary(mgoth)
# Get the data with Romanesque style and plot the scatter plot
data("cathedral")
romadata <- filter(cathedral, Type == 'Romanesque')
mroma <- lm(Length ~ Height, data = romadata)
summary(mroma)
library("alr4", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
data('salary')
View
View(salary)
data('salary)
m1 <- lm(salary ~ sex + year + sex*year, data = salary)
data('salary)
m1 <- lm(salary ~ sex + year + sex*year, data = 'salary')
data('salary)
m1 <- lm(salary ~ sex + year + sex*year, data = salary)
data('salary')
m1 <- lm(salary ~ sex + year + sex*year, data = salary)
data('salary')
m1 <- lm(salary ~ sex + year + sex*year, data = salary)
summary(m1)
?lm
?relevel
typeof(salary)
data('salary')
salary < as.data.frame(salary)
m1 <- lm(salary ~ sex + year + sex*year, data = salary)
summary(m1)
data('salary')
salary < as.data.frame(salary)
m1 <- lm(salary ~ sex + year + sex*year, data = salary)
summary(m1)
data('salary')
salary <- as.data.frame(salary)
m1 <- lm(salary ~ sex + year + sex*year, data = salary)
summary(m1)
typeof(salary)
salary[,3]
salary[,3] <- ifelse(salary[,3] == "Male", 2, ifelse(salary[,3] == "Female", 1))
salary[,3] <- ifelse(salary[,3] == "Male", 2, ifelse(salary[,3] == "Female", 1, 99))
View(salary)
m1 <- lm(salary ~ sex + year + sex*year, data = salary)
summary(m1)
salary[,3] <- ifelse(salary[,3] == "Male", -1, ifelse(salary[,3] == "Female", 1, 99))
m1 <- lm(salary ~ sex + year + sex*year, data = salary)
summary(m1)
data('salary')
salary <- as.data.frame(salary)
salary[,3] <- ifelse(salary[,3] == "Male", -1, ifelse(salary[,3] == "Female", 1, 99))
m1 <- lm(salary ~ sex + year + sex*year, data = salary)
summary(m1)
install.packages("inputenc")
?inputenc
??inputenc
patient <- read.table("patient_info_tableau.txt")
library(Rserve)
install.packages("Rserve")
library(Rserve)
u3 <- lm(lifeExpF ~ group + log(ppgdp) + group:log(ppgdp), UN11)
# Load the library
library(alr4)
m0 <- lm(lifeExpF ~ 1, data = UN11)
m1 <- lm(lifeExpF ~ group, data = UN11)
anova(m0, m1)
m2 <- lm(lifeExpF ~ log(ppgdp), data = UN11)
m3 <- lm(lifeExpF ~ group + log(ppgdp), data = UN11)
anova(m1, m3)
m3a <- lm(lifeExpF ~ log(ppgdp) + group:log(ppgdp), data = UN11)
m4 <- lm(lifeExpF ~  group + log(ppgdp) + group:log(ppgdp), data = UN11)
anova(m3a,m4)
u3 <- lm(lifeExpF ~ group + log(ppgdp) + group:log(ppgdp), UN11)
summary(u3)$coef
group1 <- relevel(UN11$group, "other")
u4 <- update(u3, ~  log(ppgdp)*group1)
summary(u4)$coef
fuel2001 <- transform(fuel2001, Dlic=1000 * Drivers/Pop, Fuel=1000 * FuelC/Pop, Income = Income/1000)
m1 <- lm(Fuel ~  Tax + Dlic + Income + log(Miles), data = fuel2001)
m1a <- lm(Fuel ~  log(Miles) + Income + Dlic + Tax, data = fuel2001)
# Type I ANOVA for m1
anova(m1)
# Type I ANOVA for m1a
anova(m1a)
# Type II ANOVA for m1
Anova(m1)
# Type II ANOVA for m1
Anova(m1a)
A <- lm(log(acrePrice) ~ year, data = MinnLand)
A
MinnLand <- transform(MinnLand, fyear = as.factor(year))
B <- lm(log(acrePrice) ~ 1 + fyear, data = MinnLand)
anova(A,B)
pairs(wm2)
m1 <- lm(CSpd ~ RSpd + RDir + RSpd:RDir, data = wm2)
m2 <- lm(CSpd ~ Bin, data = wm2)
m3 <- lm(CSpd ~ RSpd + RDir + RSpd:RDir + Bin, data = wm2)
m4 <- lm(CSpd ~ RSpd + RDir + RSpd:RDir + RSpd:Bin + RDir:Bin + Bin, data = wm2)
anova(m3,m4)
library(readr)
BP <- read_csv("~/Desktop/Heathhackthon/BP.csv")
View(BP)
library(readr)
dataset <- read_csv(NULL)
View(dataset)
library(readr)
dataset <- read_csv(NULL)
View(dataset)
library(readr)
SO2 <- read_csv("~/Desktop/Heathhackthon/SO2.csv")
View(SO2)
library(readr)
X4 <- read_csv("~/Desktop/Heathhackthon/datasets/jawbone/particpant4/4.csv")
View(X4)
X4$`participant-id` <- 3
library(sp)
library(ggmap)
library(ggplot2)
library(readxl)
library(leaflet)
library(maps)
library(magrittr)
library(dplyr)
library(shiny)
data1 = read_excel("data/Changes in Urban Land, Population and Density by Country.xlsx", sheet = 'Countries', skip=2)
data1 = data1[-c(1,20,21,22),-16]
data1$Country[c(4,7,13,15)] = c("North Korea", "Laos", "South Korea", "Taiwan")
country_name = data1$Country
data2 = read_excel("data/Urban Areas with Populations Greater Than 100,000 People.xlsx", sheet = 'Urban_Areas_by_pop', skip = 2)
data2 = data2 %>% na.omit()
data2 = data2[-1]
temp = factor(data2$Country)
levels(temp) = country_name
data2$Country = as.character(temp)
city_name = gsub(" urban area", "", data2$`Urban Area Name`)
city_name = gsub("'", " ", city_name)
city_name = paste(city_name, data2$Country, sep=", ")
#coord = geocode(city_name, messaging = F)
#write.csv(coord, file = "EDA_Project/data/coord.csv", row.names=FALSE)
coord = read.csv("data/coord.csv")
data2$lon = coord$lon
data2$lat = coord$lat
pop_city = paste0( "<strong>Name: </strong>",
data2$`Urban Area Name`, ", ", data2$Country,
"<br><strong>Fragmentation: </strong>",
data2$`Administrative boundary arrangementd`,
"<br><strong>Urban land 2000 (sq. km.): </strong>",
data2$`Urban landa c 2000 (sq. km.)`,
"<br><strong>Urban land 2010 (sq. km.): </strong>",
data2$`Urban landa c 2010 (sq. km.)`,
"<br><strong>Urban population 2000: </strong>",
data2$`Urban populationc c 2000 (persons)`,
"<br><strong>Urban population 2010: </strong>",
data2$`Urban populationc c 2010 (persons)`
)
east_asia = map(regions=sov.expand(country_name), fill = T, plot = F)
east_asia$names = gsub(":.*", "", east_asia$names)
factpal = colorFactor(topo.colors(18), east_asia$names)
map = leaflet(data = east_asia) %>% addTiles() %>% addPolygons(fillColor = ~factpal(names), stroke = F,label=east_asia$names)
map %>%
addCircles(lng = coord$lon, lat = coord$lat, radius=20000, weight=1, fillOpacity = 1, label = ~data2$`Urban Area Name`,color="brown")
shinyApp(
ui = fluidPage(
sliderInput(inputId = "pop",
label = "Population:",
min = 30000, max = 28000000, value = 0, step = 5000),
tags$div(title = "This input has a tool tip",
selectInput(inputId = "frag",
label = "Fragmentation",
choices = sort(unique(data2$`Administrative boundary arrangementd`)))),
leafletOutput("MapPlot1")
),
server = function(input, output) {
output$MapPlot1 <- renderLeaflet({
map
})
observe({
pop <- input$pop
frag <- input$frag
sites <- data2 %>%
filter(findInterval(data2$`Urban populationc c 2000 (persons)`, c(pop - 2500, pop + 2500)) == 1 & data2$`Administrative boundary arrangementd` %in% frag)
leafletProxy("MapPlot1") %>% clearMarkers() %>%
addCirclesMarkers(lng = sites$lon, lat = sites$lat, radius=20000, weight=1, fillOpacity = 1, label = ~sites$`Urban Area Name`,color="brown")
})
},
options = list(height = 600)
)
shinyApp(
ui = fluidPage(
sliderInput(inputId = "pop",
label = "Population:",
min = 30000, max = 28000000, value = 0, step = 5000),
tags$div(title = "This input has a tool tip",
selectInput(inputId = "frag",
label = "Fragmentation",
choices = sort(unique(data2$`Administrative boundary arrangementd`)))),
leafletOutput("MapPlot1")
),
server = function(input, output) {
output$MapPlot1 <- renderLeaflet({
map
})
observe({
pop <- input$pop
frag <- input$frag
sites <- data2 %>%
filter(findInterval(data2$`Urban populationc c 2000 (persons)`, c(pop - 2500, pop + 2500)) == 1 & data2$`Administrative boundary arrangementd` %in% frag)
leafletProxy("MapPlot1") %>% clearMarkers() %>%
addCirclesMarkers(lng = sites$lon, lat = sites$lat, radius=20000, weight=1, fillOpacity = 1, label = ~sites$`Urban Area Name`,color="brown")
})
},
options = list(height = 600)
)
shinyApp(
ui = fluidPage(
sliderInput(inputId = "pop",
label = "Population:",
min = 30000, max = 28000000, value = 0, step = 5000),
tags$div(title = "This input has a tool tip",
selectInput(inputId = "frag",
label = "Fragmentation",
choices = sort(unique(data2$`Administrative boundary arrangementd`)))),
leafletOutput("MapPlot1")
),
server = function(input, output) {
output$MapPlot1 <- renderLeaflet({
map
})
observe({
pop <- input$pop
frag <- input$frag
sites <- data2 %>%
filter(findInterval(data2$`Urban populationc c 2000 (persons)`, c(pop - 2500, pop + 2500)) == 1 & data2$`Administrative boundary arrangementd` %in% frag)
leafletProxy("MapPlot1") %>% clearMarkers() %>%
addCirclesMarkers(lng = sites$lon, lat = sites$lat, radius=20000, weight=1, fillOpacity = 1, label = ~sites$`Urban Area Name`,color="brown")
})
},
options = list(height = 600)
)
library(readxl)
library(dplyr)
library(ggmap)
data2 = read_excel("/data/Urban Areas with Populations Greater Than 100,000 People.xlsx", sheet = 'Urban_Areas_by_pop', skip = 2)
data2 = read_excel("~/data/Urban Areas with Populations Greater Than 100,000 People.xlsx", sheet = 'Urban_Areas_by_pop', skip = 2)
setwd("~/Columbia/2017Spring/Visulization/EDA_Project/data")
data2 = read_excel("~/data/Urban Areas with Populations Greater Than 100,000 People.xlsx", sheet = 'Urban_Areas_by_pop', skip = 2)
data2 = read_excel("~/Columbia/2017Spring/Visulization/EDA_Project/data/Urban Areas with Populations Greater Than 100,000 People.xlsx", sheet = 'Urban_Areas_by_pop', skip = 2)
data2 = data2 %>% na.omit()
data2 = data2[-1]
temp = factor(data2$Country)
levels(temp) = country_name
data2$Country = as.character(temp)
city_name = gsub(" urban area", "", data2$`Urban Area Name`)
city_name = gsub("'", " ", city_name)
city_name = paste(city_name, data2$Country, sep=", ")
coord = geocode(city_name, messaging = F)
new_dataset <- cbind(data2,coord)
write.csv(new_dataset, file = "fortableau.csv", row.names=FALSE)
shinyApp(
ui = fluidPage(
sliderInput(inputId = "pop",
label = "Population:",
min = 30000, max = 28000000, value = 0, step = 5000),
tags$div(title = "This input has a tool tip",
selectInput(inputId = "frag",
label = "Fragmentation",
choices = sort(unique(data2$`Administrative boundary arrangementd`)))),
leafletOutput("MapPlot1")
),
server = function(input, output) {
output$MapPlot1 <- renderLeaflet({
map
})
observe({
pop <- input$pop
frag <- input$frag
sites <- data2 %>%
filter(findInterval(data2$`Urban populationc c 2000 (persons)`, c(pop - 2500, pop + 2500)) == 1 & data2$`Administrative boundary arrangementd` %in% frag)
leafletProxy("MapPlot1") %>% clearMarkers() %>%
addCirclesMarkers(lng = sites$lon, lat = sites$lat, radius=20000, weight=1, fillOpacity = 1, label = ~sites$`Urban Area Name`,color="brown")
})
},
options = list(height = 600)
)
data2$x = data2$`Urban populationc c 2010 (persons)`
shinyApp(
ui = fluidPage(
sliderInput(inputId = "time",
label = "Population:",
min = 30000, max = 28000000, value = 0, step = 500000),
tags$div(title = "This input has a tool tip",
selectInput(inputId = "taxon",
label = "Taxon of Interest",
choices = sort(unique(data2$`Administrative boundary arrangementd`)))),
leafletOutput("MapPlot1")
),
server = function(input, output) {
output$MapPlot1 <- renderLeaflet({
map
})
observe({
age <- input$time
taxon <- input$taxon
sites <- data2 %>%
filter(findInterval(data2$`Urban populationc c 2010 (persons)`, c(age - 250000, age + 250000)) == 1 &
data2$`Administrative boundary arrangementd` %in% taxon)
leafletProxy("MapPlot1", data=sites) %>% clearShapes() %>%
addCircles(lng = ~lon, lat = ~lat, weight = 1, color = "brown",
radius = ~sqrt(x)*40, popup = pop_city, fillColor = "black", stroke = T, label=~data2$`Urban Area Name`
)
})
},
options = list(height = 600)
)
?rug
